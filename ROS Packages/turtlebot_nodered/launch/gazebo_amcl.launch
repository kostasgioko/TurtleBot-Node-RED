<!-- Launch file for Navigation function -->

<launch>
  <!-- TURTLEBOT GAZEBO LAUNCH -->

  <arg name="world_file"  default="$(env TURTLEBOT_GAZEBO_WORLD_FILE)"/>

  <arg name="base"      value="$(optenv TURTLEBOT_BASE kobuki)"/>
  <arg name="battery"   value="$(optenv TURTLEBOT_BATTERY /proc/acpi/battery/BAT0)"/> 
  <arg name="gui" default="true"/>
  <arg name="stacks"    value="$(optenv TURTLEBOT_STACKS hexagons)"/>
  <arg name="3d_sensor" value="$(optenv TURTLEBOT_3D_SENSOR kinect)"/> 

  <arg name="robot_x" default="0"/>
  <arg name="robot_y" default="0"/>
  <arg name="robot_a" default="0"/>

  <!-- Launch Gazebo world -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="use_sim_time" value="true"/>
    <arg name="debug" value="false"/>
    <arg name="gui" value="$(arg gui)" />
    <arg name="world_name" value="$(arg world_file)"/>
  </include>
    
  <!-- Robot description file -->
  <arg name="urdf_file" default="$(find xacro)/xacro.py '$(find turtlebot_description)/robots/$(arg base)_$(arg stacks)_$(arg 3d_sensor).urdf.xacro'" />
  <param name="robot_description" command="$(arg urdf_file)" />
  
  <!-- Spawn Robot -->
  <node name="spawn_turtlebot_model" pkg="gazebo_ros" type="spawn_model"
        args="-x $(arg robot_x) -y $(arg robot_y) -Y $(arg robot_a) -unpause -urdf -param robot_description -model mobile_base"/>
  
  <!-- Velocity muxer -->
  <node pkg="nodelet" type="nodelet" name="mobile_base_nodelet_manager" args="manager"/>
  <node pkg="nodelet" type="nodelet" name="cmd_vel_mux"
        args="load yocs_cmd_vel_mux/CmdVelMuxNodelet mobile_base_nodelet_manager">
    <param name="yaml_cfg_file" value="$(find turtlebot_bringup)/param/mux.yaml" />
    <remap from="cmd_vel_mux/output" to="mobile_base/commands/velocity"/>
  </node>

  <!-- Bumper/cliff to pointcloud (not working, as it needs sensors/core messages) -->
  <include file="$(find turtlebot_bringup)/launch/includes/kobuki/bumper2pc.launch.xml"/>

  
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" required="True">
    <param name="publish_frequency" type="double" value="30.0" />
  </node>
  
  <!-- Fake laser -->
  <node pkg="nodelet" type="nodelet" name="laserscan_nodelet_manager" args="manager" required="True"/>
  <node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan" required="True"
        args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet laserscan_nodelet_manager">
    <param name="scan_height" value="10"/>
    <param name="output_frame_id" value="/camera_depth_frame"/>
    <param name="range_min" value="0.45"/>
    <remap from="image" to="/camera/depth/image_raw"/>
    <remap from="scan" to="/scan"/>
  </node>



  <!-- AMCL LAUNCH -->

  <!-- Map server -->
  <arg name="map_file" default="$(env TURTLEBOT_GAZEBO_MAP_FILE)"/>

  <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)" required="True"/>

  <!-- Localization -->
  <arg name="initial_pose_x" default="0.0"/>
  <arg name="initial_pose_y" default="0.0"/>
  <arg name="initial_pose_a" default="0.0"/>
  <arg name="custom_amcl_launch_file" default="$(find turtlebot_navigation)/launch/includes/amcl/$(arg 3d_sensor)_amcl.launch.xml"/> 

  <include file="$(arg custom_amcl_launch_file)">
    <arg name="initial_pose_x" value="$(arg initial_pose_x)"/>
    <arg name="initial_pose_y" value="$(arg initial_pose_y)"/>
    <arg name="initial_pose_a" value="$(arg initial_pose_a)"/>
  </include>

  <!-- ÎœOVE BASE -->
 <include file="$(find turtlebot_navigation)/launch/includes/move_base.launch.xml"/>




  <!-- OTHER NODES -->
  <arg name="map" default="default"/>
  <node name="send_goal" pkg="turtlebot_nodered" type="send_goal.py" required="True"/>
  <node name="navigation_map" pkg="turtlebot_nodered" type="navigation_map.py" args="$(arg map)" required="True"/>
  <node name="robot_pose_publisher" pkg="robot_pose_publisher" type="robot_pose_publisher" required="True"/>
</launch>
