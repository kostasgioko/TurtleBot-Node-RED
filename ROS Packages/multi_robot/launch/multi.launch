<!--Multi robot navigation launch file -->

<launch>
  <!-- Set up arguments-->
  <arg name="world_file"  default="$(env TURTLEBOT_GAZEBO_WORLD_FILE)"/>

  <arg name="base"      value="$(optenv TURTLEBOT_BASE kobuki)"/> <!-- create, roomba -->
  <arg name="battery"   value="$(optenv TURTLEBOT_BATTERY /proc/acpi/battery/BAT0)"/>  <!-- /proc/acpi/battery/BAT0 --> 
  <arg name="gui" default="true"/>
  <arg name="stacks"    value="$(optenv TURTLEBOT_STACKS hexagons)"/>  <!-- circles, hexagons --> 
  <arg name="3d_sensor" value="$(optenv TURTLEBOT_3D_SENSOR kinect)"/>  <!-- kinect, asus_xtion_pro -->

  <arg name="robot1_x" default="0"/>
  <arg name="robot1_y" default="0"/>
  <arg name="robot1_a" default="0"/>
  <arg name="robot_name1" value="robot1"/>
  <arg name="robot2_x" default="1"/>
  <arg name="robot2_y" default="1"/>
  <arg name="robot2_a" default="0"/>
  <arg name="robot_name2" value="robot2"/>

  <!-- Launch Gazebo world -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="use_sim_time" value="true"/>
    <arg name="debug" value="false"/>
    <arg name="gui" value="$(arg gui)" />
    <arg name="world_name" value="$(arg world_file)"/>
  </include>

  <!-- Robot description file -->
  <arg name="urdf_file" default="$(find xacro)/xacro.py '$(find turtlebot_description)/robots/$(arg base)_$(arg stacks)_$(arg 3d_sensor).urdf.xacro'" />
  <param name="robot_description" command="$(arg urdf_file)" />

  <!-- Map server -->
  <arg name="map_file" default="$(env TURTLEBOT_GAZEBO_MAP_FILE)"/>

  <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)" required="True">
    <param name="frame_id" value="/map" />
  </node>


  <!-- BEGIN ROBOT 1-->
  <!-- Robot 1 namespace -->
  <group ns="$(arg robot_name1)">

    <!-- Robot 1 tf_prefix -->
    <param name="tf_prefix" value="robot1_tf" />

    <!-- Gazebo model spawner -->
    <node name="spawn_turtlebot_model" pkg="gazebo_ros" type="spawn_model"
          args="-x $(arg robot1_x) -y $(arg robot1_y) -Y $(arg robot1_a) -unpause -urdf -param /robot_description -model $(arg robot_name1)"/>

    <!-- Velocity muxer -->
    <node pkg="nodelet" type="nodelet" name="mobile_base_nodelet_manager" args="manager"/>
    <node pkg="nodelet" type="nodelet" name="cmd_vel_mux"
          args="load yocs_cmd_vel_mux/CmdVelMuxNodelet mobile_base_nodelet_manager">
      <param name="yaml_cfg_file" value="$(find turtlebot_bringup)/param/mux.yaml" />
      <remap from="cmd_vel_mux/output" to="mobile_base/commands/velocity"/>
    </node>

    <!-- Bumper/cliff to pointcloud (not working, as it needs sensors/core messages) -->
    <include file="$(find turtlebot_bringup)/launch/includes/kobuki/bumper2pc.launch.xml"/>

    <!-- Robot state publisher -->
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" required="True">
      <param name="publish_frequency" type="double" value="30.0" />
    </node>

    <!-- Fake laser -->
    <node pkg="nodelet" type="nodelet" name="laserscan_nodelet_manager" args="manager" required="True"/>
    <node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan" required="True"
          args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet laserscan_nodelet_manager">
      <param name="scan_height" value="10"/>
      <param name="output_frame_id" value="/robot1_tf/camera_depth_frame"/>
      <param name="range_min" value="0.45"/>
      <remap from="image" to="camera/depth/image_raw"/>
    </node>



    <!-- AMCL LAUNCH -->
    <arg name="custom_amcl_launch_file" default="$(find multi_robot)/launch/amcl.launch"/> 

    <include file="$(arg custom_amcl_launch_file)">
      <arg name="initial_pose_x" value="0"/>
      <arg name="initial_pose_y" value="0"/>
      <arg name="initial_pose_a" value="0"/>
      <arg name="global_frame_id" value="/map"/>
      <arg name="tf_prefix" value="robot1_tf"/>
      <param name="odom_frame_id" value="robot1/odom"/>
      <param name="base_frame_id" value="robot1/base_link"/>
      <arg name="use_map_topic" value="false"/>
      <arg name="scan_topic" value="/robot1/scan"/>
    </include>



    <!-- MOVE BASE -->
    <!-- ROS navigation stack with velocity smoother and safety (reactive) controller -->
    <include file="$(find turtlebot_navigation)/launch/includes/velocity_smoother.launch.xml"/>
    <include file="$(find turtlebot_navigation)/launch/includes/safety_controller.launch.xml"/>
  
    <arg name="odom_frame_id"   default="odom"/>
    <arg name="base_frame_id"   default="base_footprint"/>
    <arg name="global_frame_id" default="/map"/>
    <arg name="odom_topic" default="odom" />
    <arg name="laser_topic" default="scan" />
    
    <arg name="custom_param_file" default="$(find turtlebot_navigation)/param/dummy.yaml"/>

    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
      <rosparam file="$(find turtlebot_navigation)/param/costmap_common_params.yaml" command="load" ns="global_costmap" />
      <rosparam file="$(find turtlebot_navigation)/param/costmap_common_params.yaml" command="load" ns="local_costmap" />   
      <rosparam file="$(find turtlebot_navigation)/param/local_costmap_params.yaml" command="load" />   
      <rosparam file="$(find turtlebot_navigation)/param/global_costmap_params.yaml" command="load" />
      <rosparam file="$(find turtlebot_navigation)/param/dwa_local_planner_params.yaml" command="load" />
      <rosparam file="$(find turtlebot_navigation)/param/move_base_params.yaml" command="load" />
      <rosparam file="$(find turtlebot_navigation)/param/global_planner_params.yaml" command="load" />
      <rosparam file="$(find turtlebot_navigation)/param/navfn_global_planner_params.yaml" command="load" />
      <!-- external params file that could be loaded into the move_base namespace -->
      <rosparam file="$(arg custom_param_file)" command="load" />
    
      <!-- reset frame_id parameters using user input data -->
      <param name="global_costmap/global_frame" value="$(arg global_frame_id)"/>
      <param name="global_costmap/robot_base_frame" value="$(arg base_frame_id)"/>
      <param name="local_costmap/global_frame" value="$(arg odom_frame_id)"/>-->
      <param name="local_costmap/robot_base_frame" value="$(arg base_frame_id)"/>
      <param name="DWAPlannerROS/global_frame_id" value="$(arg odom_frame_id)"/>
      <remap from="cmd_vel" to="navigation_velocity_smoother/raw_cmd_vel"/>
      <remap from="map" to="/map" />
    </node>



    <!-- Publish transform from /map to robot1_tf/odom-->
    <node pkg="tf" type="static_transform_publisher" name="base_map_broadcaster1" args="$(arg robot1_x) $(arg robot1_y) 0 $(arg robot1_a) 0 0 /map robot1_tf/odom 100"/>


    <!-- Robot pose publisher -->
    <node name="robot1_pose_publisher" pkg="multi_robot_pose_publisher" type="robot1_pose_publisher"/>

  </group>


  <!-- BEGIN ROBOT 2-->
  <!-- Robot 2 namespace -->
  <group ns="$(arg robot_name2)">

    <!-- Robot 2 tf_prefix -->
    <param name="tf_prefix" value="robot2_tf" />

    <!-- Gazebo model spawner -->
    <node name="spawn_turtlebot_model" pkg="gazebo_ros" type="spawn_model"
          args="-x $(arg robot2_x) -y $(arg robot2_y) -Y $(arg robot2_a) -unpause -urdf -param /robot_description -model $(arg robot_name2)"/>

    <!-- Velocity muxer -->
    <node pkg="nodelet" type="nodelet" name="mobile_base_nodelet_manager" args="manager"/>
    <node pkg="nodelet" type="nodelet" name="cmd_vel_mux"
          args="load yocs_cmd_vel_mux/CmdVelMuxNodelet mobile_base_nodelet_manager">
      <param name="yaml_cfg_file" value="$(find turtlebot_bringup)/param/mux.yaml" />
      <remap from="cmd_vel_mux/output" to="mobile_base/commands/velocity"/>
    </node>

    <!-- Bumper/cliff to pointcloud (not working, as it needs sensors/core messages) -->
    <include file="$(find turtlebot_bringup)/launch/includes/kobuki/bumper2pc.launch.xml"/>

    <!-- Robot state publisher -->
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" required="True">
      <param name="publish_frequency" type="double" value="30.0" />
    </node>

    <!-- Fake laser -->
    <node pkg="nodelet" type="nodelet" name="laserscan_nodelet_manager" args="manager" required="True"/>
    <node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan" required="True"
          args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet laserscan_nodelet_manager">
      <param name="scan_height" value="10"/>
      <param name="output_frame_id" value="/robot2_tf/camera_depth_frame"/>
      <param name="range_min" value="0.45"/>
      <remap from="image" to="camera/depth/image_raw"/>
    </node>



    <!-- AMCL LAUNCH -->
    <arg name="custom_amcl_launch_file" default="$(find multi_robot)/launch/amcl.launch"/> 

    <include file="$(arg custom_amcl_launch_file)">
      <arg name="initial_pose_x" value="$(arg robot2_x)"/>
      <arg name="initial_pose_y" value="$(arg robot2_y)"/>
      <arg name="initial_pose_a" value="$(arg robot2_a)"/>
      <arg name="global_frame_id" value="/map"/>
      <arg name="tf_prefix" value="robot2_tf"/>
      <param name="odom_frame_id" value="robot2/odom"/>
      <param name="base_frame_id" value="robot2/base_link"/>
      <arg name="use_map_topic" value="false"/>
      <arg name="scan_topic" value="/robot2/scan"/>
    </include>



    <!-- MOVE BASE -->
    <!-- ROS navigation stack with velocity smoother and safety (reactive) controller -->
    <include file="$(find turtlebot_navigation)/launch/includes/velocity_smoother.launch.xml"/>
    <include file="$(find turtlebot_navigation)/launch/includes/safety_controller.launch.xml"/>
  
    <arg name="odom_frame_id"   default="odom"/>
    <arg name="base_frame_id"   default="base_footprint"/>
    <arg name="global_frame_id" default="/map"/>
    <arg name="odom_topic" default="odom" />
    <arg name="laser_topic" default="scan" />
    <arg name="custom_param_file" default="$(find turtlebot_navigation)/param/dummy.yaml"/>

    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
      <rosparam file="$(find turtlebot_navigation)/param/costmap_common_params.yaml" command="load" ns="global_costmap" />
      <rosparam file="$(find turtlebot_navigation)/param/costmap_common_params.yaml" command="load" ns="local_costmap" />   
      <rosparam file="$(find turtlebot_navigation)/param/local_costmap_params.yaml" command="load" />   
      <rosparam file="$(find turtlebot_navigation)/param/global_costmap_params.yaml" command="load" />
      <rosparam file="$(find turtlebot_navigation)/param/dwa_local_planner_params.yaml" command="load" />
      <rosparam file="$(find turtlebot_navigation)/param/move_base_params.yaml" command="load" />
      <rosparam file="$(find turtlebot_navigation)/param/global_planner_params.yaml" command="load" />
      <rosparam file="$(find turtlebot_navigation)/param/navfn_global_planner_params.yaml" command="load" />
      <!-- external params file that could be loaded into the move_base namespace -->
      <rosparam file="$(arg custom_param_file)" command="load" />
    
      <!-- reset frame_id parameters using user input data -->
      <param name="global_costmap/global_frame" value="$(arg global_frame_id)"/>
      <param name="global_costmap/robot_base_frame" value="$(arg base_frame_id)"/>
      <param name="local_costmap/global_frame" value="$(arg odom_frame_id)"/>
      <param name="local_costmap/robot_base_frame" value="$(arg base_frame_id)"/>
      <param name="DWAPlannerROS/global_frame_id" value="$(arg odom_frame_id)"/>

      <remap from="cmd_vel" to="navigation_velocity_smoother/raw_cmd_vel"/>
      <remap from="map" to="/map" />
    </node>

    <!-- Publish transform from /map to robot2_tf/odom-->
    <node pkg="tf" type="static_transform_publisher" name="base_map_broadcaster2" args="$(arg robot2_x) $(arg robot2_y) 0 $(arg robot2_a) 0 0 /map robot2_tf/odom 100"/>

    <!-- Robot pose publisher -->
    <node name="robot2_pose_publisher" pkg="multi_robot_pose_publisher" type="robot2_pose_publisher"/>

  </group>


  <!-- OTHER NODES -->
  <arg name="map" default="default"/>
  <node name="send_goal_multi" pkg="multi_robot" type="send_goal_multi.py" required="True"/>
  <node name="navigation_map_multi" pkg="multi_robot" type="navigation_map_multi.py" args="$(arg map)" required="True"/>

</launch>
